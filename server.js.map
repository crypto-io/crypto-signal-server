{"version":3,"file":"server.js","sources":["src/index.js"],"sourcesContent":["import {createWatcher} from 'ip-monitor';\r\nimport { Server } from 'http';\r\nimport _io from 'socket.io';\r\nimport ecdh from 'crypto-ecdh';\r\nimport swarmKey from 'js-ipfs-swarm-key-gen';\r\nimport { read } from 'crypto-io-fs';\r\nimport { join } from 'path';\r\nimport { homedir } from 'os';\r\nimport { info } from 'crypto-logger';\r\n\r\nconst server = Server();\r\nconst io = _io(server);\r\nconst store = {};\r\nconst bootstrap = new Map();\r\nconst connections = new Map();\r\n\r\nswarmKey().then(() => info('key Initialized: ready for connections'));\r\nconst MULTIHASH = 'QmZKZYyoW3jXR43CpD5AAHWv8na9PZxzijBYat2wBCAgyv'\r\n/**\r\n * Main peernet address\r\n * @param {string} ip The ip for the running daemon\r\n * @return {string} The address as a MultiAddress /protocolversion/ip/protocol/port/ipfs/peerID\r\n */\r\n const address = ip => `/ip4/${ip}/tcp/80/ipfs/${MULTIHASH}`;\r\n\r\n/**\r\n * @important\r\n * hardcoded privateKey, the key is used for network identification so that only our nodes are on it...\r\n * this key IS NOT used for any security services!\r\n */\r\n\r\nclass SecureConnection {\r\n  constructor(socket, pair) {\r\n    // declare properties\r\n    this.id = socket.id;\r\n    this.pair = pair;\r\n    this.socket = socket;\r\n    // bind methods\r\n    this.handshake = this.handshake.bind(this);\r\n    this.keyRequest = this.keyRequest.bind(this);\r\n    // init listeners & emitters\r\n    this.shake();\r\n  }\r\n  /**\r\n   * Initialize double handshake\r\n   *\r\n   * Info: Even when a public key is leaked the attacker doesn't get the time to even think about bruteforcing\r\n   */\r\n  shake() {\r\n    this.socket.on('_handshake', this.handshake);\r\n    this.socket.emit('handshake', this.pair.public);\r\n    this.socket.on('request-key', this.keyRequest);\r\n  }\r\n\r\n  /**\r\n   * @param {string} key The public key used for encypting/decrypting\r\n   */\r\n  async handshake(key) {\r\n    try {\r\n      this.pair.derive(key);\r\n      // prepare the new keys\r\n      const pair = ecdh('hex');\r\n      const cipher = await this.pair.encrypt(pair.public);\r\n      // retrieve the encrypted key\r\n      this.socket.on('_secure-connection', async cipher => {\r\n        try {\r\n          const key = await this.pair.decrypt(cipher);\r\n          this.pair = pair;\r\n          this.pair.derive(key);\r\n          const encrypted = await this.pair.encrypt(address(store.ip));\r\n          this.socket.emit('network', encrypted.toString());\r\n          this.socket.on('address', data => console.log(data));\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      })\r\n      // send our encrypted key to the client\r\n      this.socket.emit('secure-connection', cipher.toString());\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n  async keyRequest() {\r\n    const key = await read(join(homedir(), '.ipfs', 'swarm.key'), 'string');\r\n    const cipher = await this.pair.encrypt(key);\r\n    this.socket.emit('_request-key', cipher.toString())\r\n  }\r\n}\r\n\r\nio.on('connection', socket => {\r\n  socket.join('network');\r\n  connections.set(socket.id, {status: 'pending'});\r\n  new SecureConnection(socket, ecdh('hex'));\r\n});\r\n\r\nio.on('disconnect', socket => {\r\n  const address = connections.get(socket.id);\r\n  connections.remove(socket.id);\r\n  bootstrap.remove(address);\r\n});\r\n\r\n// TODO: check if needed when a peer is connected already...\r\nconst announceAddress = ip => {\r\n  store.ip = ip;\r\n  io.to('network', {address: address(ip)});\r\n}\r\n\r\n// create ip watcher\r\nconst watcher = createWatcher();\r\n\r\n// announceAddress everytime a change is detected\r\nwatcher.on('IP:change', (oldIP, newIP) => {\r\n  if (oldIP !== newIP) announceAddress(newIP);\r\n});\r\n\r\n// start ip watcher\r\nwatcher.start();\r\n\r\nserver.listen(4040, () => info('listening on 4040'));\r\n"],"names":["server","Server","io","_io","store","bootstrap","Map","connections","swarmKey","then","info","MULTIHASH","address","ip","SecureConnection","socket","pair","id","handshake","bind","keyRequest","shake","on","emit","public","key","derive","ecdh","cipher","encrypt","decrypt","encrypted","toString","data","console","log","e","error","read","join","homedir","set","status","get","remove","announceAddress","to","watcher","createWatcher","oldIP","newIP","start","listen"],"mappings":"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"}